import ccxt
import pandas as pd
import time
import numpy as np
import matplotlib.pyplot as plt
import smtplib
from email.mime.text import MIMEText
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import os

# Initialize Binance API (Public for market data only)
exchange = ccxt.binance()

# Parameters
symbol = 'BTC/USDT'
timeframe = '1h'  # 1-hour candles
sma_period = 14
starting_balance = 10000  # Simulated balance
stop_loss_pct = 0.02  # 2% stop-loss
take_profit_pct = 0.05  # 5% take-profit
email_recipient = os.getenv('EMAIL_RECIPIENT', 'tuxer94@hotmail.com')  # Set recipient email from environment variable

# Email alert function
def send_email_alert(subject, body):
    sender_email = os.getenv('EMAIL_SENDER', 'btcpapertrader@gmail.com')
    sender_password = os.getenv('EMAIL_PASSWORD', 'Let'sGetThisBread666!')
    
    msg = MIMEText(body)
    msg['Subject'] = subject
    msg['From'] = sender_email
    msg['To'] = email_recipient
    
    try:
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(sender_email, sender_password)
        server.sendmail(sender_email, email_recipient, msg.as_string())
        server.quit()
        print("Email alert sent successfully!")
    except Exception as e:
        print(f"Failed to send email: {e}")

# Fetch historical market data
def fetch_market_data(symbol, timeframe, limit=100):
    bars = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
    df = pd.DataFrame(bars, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    return df

# Prepare data for LSTM model
def prepare_data(data, lookback=10):
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(data['close'].values.reshape(-1,1))
    X, Y = [], []
    for i in range(lookback, len(scaled_data)):
        X.append(scaled_data[i-lookback:i, 0])
        Y.append(scaled_data[i, 0])
    return np.array(X), np.array(Y), scaler

# Build LSTM Model
def build_model(input_shape):
    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=(input_shape, 1)))
    model.add(Dropout(0.2))
    model.add(LSTM(units=50, return_sequences=False))
    model.add(Dropout(0.2))
    model.add(Dense(units=1))
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

# Trading logic using AI prediction
def trading_logic(data, model, scaler, lookback=10):
    X, _, _ = prepare_data(data, lookback)
    X = X.reshape((X.shape[0], X.shape[1], 1))
    prediction = model.predict(X[-1].reshape(1, lookback, 1))
    predicted_price = scaler.inverse_transform(prediction.reshape(-1, 1))[0, 0]
    
    if predicted_price > data['close'].iloc[-1]:
        return 'BUY'
    elif predicted_price < data['close'].iloc[-1]:
        return 'SELL'
    return 'HOLD'

# Paper Trading Execution with Stop-Loss, Take-Profit, and Alerts
def paper_trade(model, scaler):
    global starting_balance
    data = fetch_market_data(symbol, timeframe)
    signal = trading_logic(data, model, scaler)
    last_close = data['close'].iloc[-1]
    
    stop_loss = last_close * (1 - stop_loss_pct)
    take_profit = last_close * (1 + take_profit_pct)
    
    if signal == 'BUY':
        message = f'BUY at {last_close} (Stop-Loss: {stop_loss}, Take-Profit: {take_profit})'
        send_email_alert('Trading Alert: BUY', message)
        print(message)
        starting_balance -= last_close  # Assume buying 1 BTC
    elif signal == 'SELL':
        message = f'SELL at {last_close}'
        send_email_alert('Trading Alert: SELL', message)
        print(message)
        starting_balance += last_close  # Assume selling 1 BTC
    
    print(f'Current Balance: {starting_balance}\n')

# Load and train model
if __name__ == "__main__":
    data = fetch_market_data(symbol, timeframe, limit=200)
    X, Y, scaler = prepare_data(data)
    X = X.reshape((X.shape[0], X.shape[1], 1))
    model = build_model(X.shape[1])
    model.fit(X, Y, epochs=10, batch_size=16)
    
    while True:
        paper_trade(model, scaler)
        time.sleep(3600)  # Run every hour
